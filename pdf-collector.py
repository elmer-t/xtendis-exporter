import os
import sys
import logging
from PIL import Image
from reportlab.pdfgen import canvas
from reportlab.lib.units import mm
from datetime import datetime

"""
Collects all images in subdirectories and creates a PDF with each image on a separate page.
The PDF is saved in the same directory as the images with the name 'directory_name-factuur.pdf'.
The script also reads a JSON file with metadata and adds it to the PDF as text on a separate page.

Author: Elmer Torensma for Acta Jifmar
Date: 2024-12-10
"""

LINE_HEIGHT = 12

def convert_images_to_pdf(input_directory, supported_extensions=None):
	"""
	Recursively convert image files in each subdirectory to a PDF in the same directory.

	:param input_directory: Path to the root directory containing subdirectories with images
	:param supported_extensions: List of supported image file extensions (default: None)
	"""
	# Set up logging
	logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s', filename='pdf_collector.log', filemode='w')
	logging.getLogger().addHandler(logging.StreamHandler(sys.stdout))

	# Default supported image extensions if not provided
	if supported_extensions is None:
		supported_extensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.tiff', '.webp']

	# Normalize extensions to lowercase
	supported_extensions = [ext.lower() for ext in supported_extensions]

	# Walk through all subdirectories
	for root, dirs, files in os.walk(input_directory):
		
		# Filter image files in the current directory
		image_files = [
			f for f in files
			if os.path.splitext(f)[1].lower() in supported_extensions
		]
		
		# Skip directories with no images
		if not image_files:
			continue
		
		# Sort image files alphabetically
		image_files.sort()
		
		# Create output filename based on directory name
		dir_name = os.path.normpath(root).split(os.sep)[-1]
		output_filename = os.path.join(root, f"{dir_name}-factuur.pdf")
		
		logging.info(f"Processing '{root}'")

		try:
			# Create PDF
			c = canvas.Canvas(output_filename)
			
			for image_file in image_files:
				# Full path to the image
				image_path = os.path.join(root, image_file)
				
				try:
					# Open the image
					img = Image.open(image_path)
					
					# Get image dimensions
					img_width, img_height = img.size
					
					# Calculate page size based on image aspect ratio
					page_width = 210 * mm  # Standard A4 width
					page_height = 297 * mm  # Standard A4 height
					
					# Calculate scaling to fit image on page while maintaining aspect ratio
					width_ratio = page_width / img_width
					height_ratio = page_height / img_height
					scale = min(width_ratio, height_ratio)
					
					# Calculate new dimensions
					new_width = img_width * scale
					new_height = img_height * scale
					
					# Calculate centered position
					x_centered = (page_width - new_width) / 2
					y_centered = (page_height - new_height) / 2
					
					# Draw image on PDF
					c.drawImage(image_path, x_centered, y_centered, width=new_width, height=new_height)
					c.showPage()
					
					logging.info(f"Added image '{image_file}'")
				
				except Exception as img_error:
					logging.error(f"Error processing '{image_file}': {img_error}")
			
			# Add a new page with the current date/time
			current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
			
			c.setFont("Helvetica", 10)
			c.drawString(10 * mm, 10 * mm, f"Generated by PDF-collector on {current_time}")
			
			# Read dir_name.json and add to PDF
			json_file = os.path.join(root, f"{dir_name}.json")

			if os.path.exists(json_file):
				
				try:
					
					# Read the contents of the JSON file and add it to a new page in the PDF file
					with open(json_file, 'r') as f:
						json_data = f.read()

						for idx, line in enumerate(json_data.splitlines()):
							c.drawString(10 * mm, page_height - 10 * mm - idx * LINE_HEIGHT, line)

						logging.info(f"Added metadata from '{json_file}'")

				except Exception as json_error:
					logging.error(f"Error reading metadata from '{json_file}': {json_error}")

			# Save the PDF
			c.save()
			logging.info(f"PDF saved successfully to '{output_filename}'")
		
		except Exception as pdf_error:
			logging.error(f"Error saving PDF for directory '{root}': {pdf_error}")

def main():
	
	# Example usage
	input_dir = input("Enter the root directory path containing image subdirectories: ")

	convert_images_to_pdf(input_dir)

if __name__ == "__main__":
	main()